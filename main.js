const currentVersion = "V1.5.4"; const updateLink = "https://shahidtatkal.github.io"; const container = document.getElementById("versionContainer"); fetch("https://shahidtatkal.github.io/accest/Version.json?nocache=" + new Date().getTime()) .then((res) => res.json()) .then((data) => { const latest = data.latestVersion; const oldMessage = data.oldVersionMessage; const statusLine = document.createElement("div"); const versionText = document.createElement("span"); versionText.textContent = `Version: ${currentVersion} - `; versionText.style.fontWeight = "bold"; versionText.style.fontSize = "15px"; const statusSpan = document.createElement("span"); statusSpan.style.fontSize = "15px"; if (currentVersion === latest) { statusSpan.textContent = "You are using the latest version."; statusSpan.style.color = "green"; } else if (compareVersions(currentVersion, latest) < 0) { statusSpan.textContent = "Please update this extension."; statusSpan.style.color = "red"; showUpdatePopup(oldMessage, latest); } else { statusSpan.textContent = "Invalid version."; statusSpan.style.color = "orange"; } statusLine.appendChild(versionText); statusLine.appendChild(statusSpan); statusLine.style.fontFamily = "Arial, sans-serif"; statusLine.style.paddingLeft = "10px"; container.appendChild(statusLine); }); function compareVersions(v1, v2) { const parts1 = v1.replace(/[^\d.]/g, "").split('.').map(Number); const parts2 = v2.replace(/[^\d.]/g, "").split('.').map(Number); const maxLen = Math.max(parts1.length, parts2.length); for (let i = 0; i < maxLen; i++) { const a = parts1[i] || 0; const b = parts2[i] || 0; if (a > b) return 1; if (a < b) return -1; } return 0; } function showUpdatePopup(message, latestVersion) { const popup = document.createElement("div"); popup.style.position = "fixed"; popup.style.top = "0"; popup.style.left = "0"; popup.style.width = "100%"; popup.style.height = "100%"; popup.style.backgroundColor = "rgba(0, 0, 0, 0.6)"; popup.style.zIndex = "9999"; popup.style.display = "flex"; popup.style.justifyContent = "center"; popup.style.alignItems = "center"; const box = document.createElement("div"); box.style.backgroundColor = "#fff"; box.style.padding = "20px"; box.style.borderRadius = "8px"; box.style.boxShadow = "0 0 20px rgba(0,0,0,0.3)"; box.style.textAlign = "center"; box.style.maxWidth = "400px"; box.style.width = "90%"; const title = document.createElement("h2"); title.textContent = "Please update this extension"; title.style.margin = "0px"; const versionInfo = document.createElement("p"); versionInfo.textContent = `Latest Version: ${latestVersion}`; versionInfo.style.fontWeight = "bold"; versionInfo.style.marginBottom = "8px"; versionInfo.style.color = "#007bff"; const msg = document.createElement("div"); msg.innerHTML = message; msg.style.marginBottom = "20px"; msg.style.color = "#333"; const btn = document.createElement("a"); btn.href = updateLink; btn.textContent = "Update Now"; btn.target = "_blank"; btn.style.backgroundColor = "#007bff"; btn.style.color = "#fff"; btn.style.padding = "10px 20px"; btn.style.borderRadius = "4px"; btn.style.textDecoration = "none"; btn.style.fontWeight = "bold"; box.appendChild(title); box.appendChild(versionInfo); box.appendChild(msg); box.appendChild(btn); popup.appendChild(box); document.body.appendChild(popup); }
(function () { const interval = setInterval(() => { const checkbox = document.getElementById('clearCheckbox'); const input1 = document.getElementById('irctc-login'); const input2 = document.getElementById('irctc-password'); if (!checkbox || !input1 || !input2) return; clearInterval(interval); const savedState = localStorage.getItem('irctcClearCheckbox'); if (savedState === 'checked') { checkbox.checked = true; clearAndDisableInputs(); } checkbox.addEventListener('change', function () { if (checkbox.checked) { clearAndDisableInputs(); localStorage.setItem('irctcClearCheckbox', 'checked'); } else { input1.disabled = false; input2.disabled = false; localStorage.setItem('irctcClearCheckbox', 'unchecked'); } }); function clearAndDisableInputs() { manuallyClear(input1); manuallyClear(input2); input1.disabled = true; input2.disabled = true; } function manuallyClear(input) { input.value = ''; input.dispatchEvent(new Event('input', { bubbles: true })); input.dispatchEvent(new Event('change', { bubbles: true })); } }, 300); })();